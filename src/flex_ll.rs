/* automatically generated by rust-bindgen */

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct flex_item {
    _unused: [u8; 0],
}
extern "C" {
    pub fn flex_item_new() -> *mut flex_item;
}
extern "C" {
    pub fn flex_item_free(item: *mut flex_item);
}
extern "C" {
    pub fn flex_item_add(item: *mut flex_item, child: *mut flex_item);
}
extern "C" {
    pub fn flex_item_insert(item: *mut flex_item,
                            index: ::std::os::raw::c_uint,
                            child: *mut flex_item);
}
extern "C" {
    pub fn flex_item_delete(item: *mut flex_item,
                            index: ::std::os::raw::c_uint) -> *mut flex_item;
}
extern "C" {
    pub fn flex_item_count(item: *mut flex_item) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn flex_item_child(item: *mut flex_item,
                           index: ::std::os::raw::c_uint) -> *mut flex_item;
}
extern "C" {
    pub fn flex_item_parent(item: *mut flex_item) -> *mut flex_item;
}
extern "C" {
    pub fn flex_item_root(item: *mut flex_item) -> *mut flex_item;
}
extern "C" {
    pub fn flex_item_set_managed_ptr(item: *mut flex_item,
                                     ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn flex_item_get_managed_ptr(item: *mut flex_item)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn flex_layout(item: *mut flex_item);
}
extern "C" {
    pub fn flex_item_get_frame_x(item: *mut flex_item) -> f32;
}
extern "C" {
    pub fn flex_item_get_frame_y(item: *mut flex_item) -> f32;
}
extern "C" {
    pub fn flex_item_get_frame_width(item: *mut flex_item) -> f32;
}
extern "C" {
    pub fn flex_item_get_frame_height(item: *mut flex_item) -> f32;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum flex_align {
    FLEX_ALIGN_AUTO = 0,
    FLEX_ALIGN_STRETCH = 1,
    FLEX_ALIGN_CENTER = 2,
    FLEX_ALIGN_START = 3,
    FLEX_ALIGN_END = 4,
    FLEX_ALIGN_SPACE_BETWEEN = 5,
    FLEX_ALIGN_SPACE_AROUND = 6,
    FLEX_ALIGN_SPACE_EVENLY = 7,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum flex_position {
    FLEX_POSITION_RELATIVE = 0,
    FLEX_POSITION_ABSOLUTE = 1,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum flex_direction {
    FLEX_DIRECTION_ROW = 0,
    FLEX_DIRECTION_ROW_REVERSE = 1,
    FLEX_DIRECTION_COLUMN = 2,
    FLEX_DIRECTION_COLUMN_REVERSE = 3,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum flex_wrap {
    FLEX_WRAP_NOWRAP = 0,
    FLEX_WRAP_WRAP = 1,
    FLEX_WRAP_WRAP_REVERSE = 2,
}
extern "C" {
    pub fn flex_item_get_width(item: *mut flex_item) -> f32;
}
extern "C" {
    pub fn flex_item_set_width(item: *mut flex_item, value: f32);
}
extern "C" {
    pub fn flex_item_get_height(item: *mut flex_item) -> f32;
}
extern "C" {
    pub fn flex_item_set_height(item: *mut flex_item, value: f32);
}
extern "C" {
    pub fn flex_item_get_left(item: *mut flex_item) -> f32;
}
extern "C" {
    pub fn flex_item_set_left(item: *mut flex_item, value: f32);
}
extern "C" {
    pub fn flex_item_get_right(item: *mut flex_item) -> f32;
}
extern "C" {
    pub fn flex_item_set_right(item: *mut flex_item, value: f32);
}
extern "C" {
    pub fn flex_item_get_top(item: *mut flex_item) -> f32;
}
extern "C" {
    pub fn flex_item_set_top(item: *mut flex_item, value: f32);
}
extern "C" {
    pub fn flex_item_get_bottom(item: *mut flex_item) -> f32;
}
extern "C" {
    pub fn flex_item_set_bottom(item: *mut flex_item, value: f32);
}
extern "C" {
    pub fn flex_item_get_padding_left(item: *mut flex_item) -> f32;
}
extern "C" {
    pub fn flex_item_set_padding_left(item: *mut flex_item, value: f32);
}
extern "C" {
    pub fn flex_item_get_padding_right(item: *mut flex_item) -> f32;
}
extern "C" {
    pub fn flex_item_set_padding_right(item: *mut flex_item, value: f32);
}
extern "C" {
    pub fn flex_item_get_padding_top(item: *mut flex_item) -> f32;
}
extern "C" {
    pub fn flex_item_set_padding_top(item: *mut flex_item, value: f32);
}
extern "C" {
    pub fn flex_item_get_padding_bottom(item: *mut flex_item) -> f32;
}
extern "C" {
    pub fn flex_item_set_padding_bottom(item: *mut flex_item, value: f32);
}
extern "C" {
    pub fn flex_item_get_margin_left(item: *mut flex_item) -> f32;
}
extern "C" {
    pub fn flex_item_set_margin_left(item: *mut flex_item, value: f32);
}
extern "C" {
    pub fn flex_item_get_margin_right(item: *mut flex_item) -> f32;
}
extern "C" {
    pub fn flex_item_set_margin_right(item: *mut flex_item, value: f32);
}
extern "C" {
    pub fn flex_item_get_margin_top(item: *mut flex_item) -> f32;
}
extern "C" {
    pub fn flex_item_set_margin_top(item: *mut flex_item, value: f32);
}
extern "C" {
    pub fn flex_item_get_margin_bottom(item: *mut flex_item) -> f32;
}
extern "C" {
    pub fn flex_item_set_margin_bottom(item: *mut flex_item, value: f32);
}
extern "C" {
    pub fn flex_item_get_justify_content(item: *mut flex_item) -> flex_align;
}
extern "C" {
    pub fn flex_item_set_justify_content(item: *mut flex_item,
                                         value: flex_align);
}
extern "C" {
    pub fn flex_item_get_align_content(item: *mut flex_item) -> flex_align;
}
extern "C" {
    pub fn flex_item_set_align_content(item: *mut flex_item,
                                       value: flex_align);
}
extern "C" {
    pub fn flex_item_get_align_items(item: *mut flex_item) -> flex_align;
}
extern "C" {
    pub fn flex_item_set_align_items(item: *mut flex_item, value: flex_align);
}
extern "C" {
    pub fn flex_item_get_align_self(item: *mut flex_item) -> flex_align;
}
extern "C" {
    pub fn flex_item_set_align_self(item: *mut flex_item, value: flex_align);
}
extern "C" {
    pub fn flex_item_get_position(item: *mut flex_item) -> flex_position;
}
extern "C" {
    pub fn flex_item_set_position(item: *mut flex_item, value: flex_position);
}
extern "C" {
    pub fn flex_item_get_direction(item: *mut flex_item) -> flex_direction;
}
extern "C" {
    pub fn flex_item_set_direction(item: *mut flex_item,
                                   value: flex_direction);
}
extern "C" {
    pub fn flex_item_get_wrap(item: *mut flex_item) -> flex_wrap;
}
extern "C" {
    pub fn flex_item_set_wrap(item: *mut flex_item, value: flex_wrap);
}
extern "C" {
    pub fn flex_item_get_grow(item: *mut flex_item) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn flex_item_set_grow(item: *mut flex_item,
                              value: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn flex_item_get_shrink(item: *mut flex_item)
     -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn flex_item_set_shrink(item: *mut flex_item,
                                value: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn flex_item_get_order(item: *mut flex_item) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flex_item_set_order(item: *mut flex_item,
                               value: ::std::os::raw::c_int);
}
extern "C" {
    pub fn flex_item_get_basis(item: *mut flex_item) -> f32;
}
extern "C" {
    pub fn flex_item_set_basis(item: *mut flex_item, value: f32);
}
